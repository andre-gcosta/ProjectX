// ---------------------------------------------------------
// Projeto X - Prisma Schema
// Banco: PostgreSQL (NeonDB com pooling .pooler)
// ---------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // use a connection string .pooler do NeonDB
}

// =========================================================
// MODELOS
// =========================================================

// üßç Usu√°rio (Autentica√ß√£o e Autoria)
model User {
  id          String    @id @default(cuid())
  email       String    @unique
  password    String
  name        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  entities    Entity[]
}

// üß© Entidade Gen√©rica
model Entity {
  id          String       @id @default(cuid())
  title       String
  content     String?
  priority    Int?         // prioridade global
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Autor opcional
  userId      String?
  user        User?        @relation(fields: [userId], references: [id])

  // Rela√ß√µes
  outgoingLinks Link[]     @relation("OutgoingLinks")
  incomingLinks Link[]     @relation("IncomingLinks")

  // Capabilities
  capabilities Capability[]

  @@index([title])
}

// ‚öôÔ∏è Capability (comportamentos modulares)
model Capability {
  id          String     @id @default(cuid())
  type        String     // ex: "task", "objective", "note", "metric", "project"
  data        Json       // conte√∫do din√¢mico espec√≠fico da capability
  entityId    String
  entity      Entity     @relation(fields: [entityId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([type])
}

// üîó Links entre entidades (grafo)
model Link {
  id          String     @id @default(cuid())
  type        String     // ex: "parent", "child", "related", "supports", "depends_on"
  sourceId    String
  targetId    String
  source      Entity     @relation("OutgoingLinks", fields: [sourceId], references: [id])
  target      Entity     @relation("IncomingLinks", fields: [targetId], references: [id])
  createdAt   DateTime   @default(now())

  @@unique([sourceId, targetId, type])
}

// üß† CapabilityTemplate (opcional - para futuros m√≥dulos custom)
model CapabilityTemplate {
  id          String   @id @default(cuid())
  name        String   @unique
  schema      Json     // estrutura do tipo (campos, tipos, valida√ß√µes)
  description String?
  createdAt   DateTime @default(now())
}
